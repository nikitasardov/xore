<?php
/**
 * Created by IntelliJ IDEA.
 * User: oleg
 * Date: 18.09.18
 * Time: 16:53
 */

namespace Xore\Uploads;

class Image extends RequestFile
{
    /**
     * формат изображения
     */
    protected $type;

    /**
     * качество картинки
     */
    protected $quality = 100;

    /**
     * размеры изображения
     */
    protected $widthToCrop = [];

    /**
     * Image constructor.
     * @param array $data
     * @param string $type
     */
    public function __construct(array $data, string $type)
    {
        parent::__construct($data);
        $this->type = $type;
    }

    /**
     * Добавить размер для миниатюр
     * @param int $width
     * @return Image
     */
    public function addWidth(int $width)
    {
        $this->widthToCrop[] = $width;
        return $this;
    }

    /**
     * задать качество для картинки
     * @param int $quality
     * @return $this
     */
    public function setQuality(int $quality)
    {
        $this->quality = $quality;
        return $this;
    }

    /**
     * сохраним оригинальную картинку
     * и миниатюры
     * @param bool $public
     * @param string $dir
     * @param null $name
     * @return bool
     */
    public function save(bool $public, string $dir, $name = null)
    {
        //нам надо создать миниатюры?
        if(count($this->widthToCrop) > 0){
            $dir = self::validPath($dir);
            //генерируем путь
            $path = __ROOT__.'/data/'.($public ? 'public' : 'private').'/'.$dir;
            //создаём папку если такой нет
            if(!is_dir($path)) mkdir($path, 0777, true);
            //задействуем обработчик картинки
            switch ($this->type){
                case "image/jpeg":
                    $image = imagecreatefromjpeg($this->data['tmp_name']);
                    break;
                case "image/png":
                    $image = imagecreatefrompng($this->data['tmp_name']);
                    break;
                case "image/gif":
                    $image = imagecreatefromgif($this->data['tmp_name']);
                    break;
                default:
                    return false;
            }
            //создадим миниатюры
            $this->crop($image, imagesx($image), imagesy($image), $path, $name ?? $this->data['name']);
        }
        return parent::save($public, $dir, $name); // TODO: Change the autogenerated stub
    }

    /**
     * создаёт миниатюры
     * @param $image
     * @param int $originalX
     * @param int $originalY
     * @param string $path
     * @param $filename
     */
    protected function crop($image, int $originalX, int $originalY, string $path, $filename)
    {
        foreach ($this->widthToCrop as $width){
            //добавим в название размер
            $nameByWidth = $this->getNameBySize($filename, $width);
            //расчёт нового размера
            $nx = $width;
            $ny = floor($originalY * ($width / $originalX));
            $nm = imagecreatetruecolor($nx, $ny);
            imagecopyresized($nm, $image, 0,0,0,0,$nx,$ny,$originalX,$originalY);
            imagejpeg($nm, "$path/$nameByWidth", $this->quality);
        }
    }

    /**
     * добавит размер в название файла
     * @param $filename
     * @param $width
     * @return string
     */
    protected function getNameBySize($filename, $width) : string
    {
        return "$width.$filename";
    }
}
